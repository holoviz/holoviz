name: docs

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+a[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+b[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
  workflow_dispatch:
    inputs:
      target:
        description: 'Site to build and deploy'
        type: choice
        options:
        - dev
        - main
        - dryrun
        required: true
        default: dryrun
  schedule:
    - cron: '0 2 1 */2 SUN'  # every two months on Sunday at 2 am

jobs:
  pre_commit:
    name: Run pre-commit hooks
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "1"
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: pre-commit
        uses: pre-commit/action@v3.0.1
  build_docs:
    name: Documentation
    needs: [pre_commit]
    runs-on: 'ubuntu-latest'
    timeout-minutes: 120
    defaults:
      run:
        shell: bash -l {0}
    env:
      MPLBACKEND: "Agg"
      MOZ_HEADLESS: 1
      DISPLAY: ":99.0"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "eu-west-1"
    steps:
      - name: Install humor sans fonts for XKCD Matplotlib plots
        run:  |
          sudo apt-get update -y  &&  sudo apt-get install -y fonts-humor-sans fonts-comic-neue ttf-mscorefonts-installer
          mkdir -p ~/.local/share/fonts
          wget -nc https://github.com/ipython/xkcd-font/blob/master/xkcd-script/font/xkcd-script.ttf?raw=true -O ~/.local/share/fonts/xkcd-Script.ttf || true
          sudo fc-cache -f -v
      - uses: actions/checkout@v4
        with:
          fetch-depth: "100"
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
      - name: Fetch unshallow
        run: git fetch --prune --tags --unshallow -f
      - name: Set output
        id: vars
        run: |
          echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "fdatetime=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT
      - name: install anaconda-project
        run: conda install "anaconda-project>=0.10.1"
      - name: prepare
        run: anaconda-project prepare --directory examples
      - name: conda list
        run: anaconda-project run --directory examples conda_list
      - name: generate rst
        run: anaconda-project run --directory examples doc_rst
      - name: build docs
        run: anaconda-project run --directory examples doc_build
      - name: git status
        run: |
          git status
          git diff
      - name: Deploy dev
        uses: peaceiris/actions-gh-pages@v4
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'dev') ||
          (github.event_name == 'push' && (contains(steps.vars.outputs.tag, 'a') || contains(steps.vars.outputs.tag, 'b') || contains(steps.vars.outputs.tag, 'rc')))
        with:
          personal_token: ${{ secrets.ACCESS_TOKEN }}
          external_repository: holoviz-dev/holoviz
          publish_dir: ./builtdocs
          force_orphan: true
      - name: Deploy main
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'main') ||
          (github.event_name == 'push' && !(contains(steps.vars.outputs.tag, 'a') || contains(steps.vars.outputs.tag, 'b') || contains(steps.vars.outputs.tag, 'rc')))
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./builtdocs
          cname: holoviz.org
          force_orphan: true
      # Upload the tutorial
      - name: git clean
        run: git clean -fxd .
      - name: anaconda-project archive
        run: anaconda-project archive --directory examples holoviz_tutorial.zip
      - name: save old
        run: cp holoviz_tutorial.zip holoviz_tutorial_${{ steps.vars.outputs.fdatetime }}_${{ steps.vars.outputs.tag }}.zip
      - name: Upload tutorial
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        run: aws s3 cp ./holoviz_tutorial_${{ steps.vars.outputs.fdatetime }}_${{ steps.vars.outputs.tag }}.zip s3://assets.holoviz.org/holoviz/tutorial/
      - name: Upload tutorial
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'main') ||
          (github.event_name == 'push' && !(contains(steps.vars.outputs.tag, 'a') || contains(steps.vars.outputs.tag, 'b') || contains(steps.vars.outputs.tag, 'rc')))
        run: aws s3 cp ./holoviz_tutorial.zip s3://assets.holoviz.org/holoviz/tutorial/
